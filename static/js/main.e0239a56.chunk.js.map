{"version":3,"sources":["Counter.js","CustomCounter.js","CustomCounterAdd.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","index","onClick","plusOne","count","resetCounter","destroyCounter","CustomCounter","PositiveNumOfButtons","Array","NumberOfButtons","keys","map","el","NegativeNumButtons","ChangeCustomCounter","key","valueToChange","ResetCustomCounter","destroyCustomCounter","ShowInput","Button","onChange","checkEvent","destroyButton","CustomCounterAdd","useState","setButton","event","target","value","CreateCustomCounter","setter","App","counter","setCounters","NumberOfCustomCounters","setCustomCounters","r","Math","round","random","Flag","newCounter","slice","splice","DestroyCustomCounter","newCustomCounter","ResetCustomCounterToZero","ChangeCustomCounterValue","update","className","element","console","log","Number","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e0239a56.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Counter(props) {\n    return (\n        <center>\n            <div>\n                Index:({props.index})\n                {\"    \"}\n                <button onClick={() => props.plusOne(props.index, true)}>+1</button>\n                {\"    \"}\n                Counter: {props.count}\n                {\"    \"}\n                <button onClick={() => props.plusOne(props.index, false)}>-1</button>\n                {\"    \"}\n                <button onClick={() => props.resetCounter(props.index)}>Reset to zero</button>\n                {\"    \"}\n                <button onClick={() => props.destroyCounter(props.index)}> Delete this counter</button>\n            </div>\n        </center>\n    );\n}\n\nexport default Counter;\n","import React from 'react';\n\n\nfunction CustomCounter(props) {\n    const PositiveNumOfButtons = [...Array(props.NumberOfButtons).keys()].map((el)=>el+1);\n    const NegativeNumButtons = PositiveNumOfButtons.map((el) => (el * -1));\n    return (\n        <center>\n            <div>\n                Index:({props.index})\n                {\"    \"}\n                {PositiveNumOfButtons.map((el, index) => <button\n                    onClick={() => props.ChangeCustomCounter(props.index, el)}\n                    key={index}>{el}</button>\n                )}\n                {\"    \"}\n                {props.valueToChange}\n                {NegativeNumButtons.map((el, index) => <button\n                    onClick={() => props.ChangeCustomCounter(props.index, el)}\n                    key={index}>{el}</button>\n                )}\n                {\"    \"}\n                <button onClick={() => props.ResetCustomCounter(props.index)}> Reset to zero</button>\n                {\"    \"}\n                <button onClick={() => props.destroyCustomCounter(props.index)}> Delete this counter</button>\n                {\"    \"}\n            </div>\n        </center>\n    );\n}\n\nexport default CustomCounter;\n","import React, {useState} from \"react\";\n\nconst ShowInput = props => {\n    if (props.Button) {\n        return (<div>\n            <legend>Enter magnitude of change (min=1, max=5)</legend>\n            <input onChange={props.checkEvent} />\n        </div>);\n    } else {\n        return <button onClick={props.destroyButton}>Add Custom Counter</button>\n    }\n    return null\n\n}\nfunction CustomCounterAdd(props) {\n    const [Button, setButton] = useState(false)\n    const checkEvent = (event) => {\n        if (event.target.value >= 1 && event.target.value <= 5) {\n            props.CreateCustomCounter(event.target.value)\n            setButton(!Button)\n        }\n    }\n\n    const changeButton = () => {\n        setButton(!Button)\n    }\n\n    return (\n        <div>\n            <ShowInput Button={Button} checkEvent={checkEvent} destroyButton={changeButton} setter={setButton}/>\n\n        </div>\n    )\n\n}\n\nexport default CustomCounterAdd","import React, {useState} from 'react';\nimport Counter from \"./Counter\";\nimport CustomCounter from \"./CustomCounter\";\nimport CustomCounterAdd from \"./CustomCounterAdd\";\n\n\nfunction App() {\n    const [counter, setCounters] = useState([])\n    const [NumberOfCustomCounters, setCustomCounters] = useState([])\n    const r = Math.round(Math.random() * 10)\n    const addCounter = () => {\n        setCounters([...counter, r])\n    }\n\n    const plusOne = (index, Flag) => {\n        let newCounter = counter.slice()\n        if (Flag) {\n            newCounter[index] = newCounter[index] + 1;\n        } else {\n            newCounter[index] = newCounter[index] - 1;\n        }\n        setCounters(newCounter)\n    }\n    const resetCounter = (index) => {\n        let newCounter = counter.slice()\n        newCounter[index] = 0;\n        setCounters(newCounter)\n    }\n    const destroyCounter = (index) => {\n        let newCounter = counter.slice()\n        newCounter.splice(index, 1)\n        setCounters(newCounter)\n    }\n    const DeleteAll = () => {\n        setCounters([])\n    }\n    const ResetAll = () => {\n        const newCounter = counter.map((element) => 0);\n        setCounters(newCounter)\n    }\n    const CreateCustomCounter = (value) => {\n        console.log(value)\n\n        setCustomCounters([...NumberOfCustomCounters, [Number(value), r]])\n    }\n    const DestroyCustomCounter = (index) => {\n        let newCustomCounter = NumberOfCustomCounters.slice()\n        newCustomCounter.splice(index, 1)\n        setCustomCounters(newCustomCounter)\n\n\n    }\n    const ResetCustomCounterToZero = (index) => {\n        let newCustomCounter = NumberOfCustomCounters.slice()\n        newCustomCounter[index][1] = 0;\n        setCustomCounters(newCustomCounter)\n    }\n    const DeleteAllCustomCounters = () => {\n        setCustomCounters([])\n    }\n    const ChangeCustomCounterValue = (index, update) => {\n        let newCustomCounter = NumberOfCustomCounters.slice()\n        newCustomCounter[index][1] = newCustomCounter[index][1] + update;\n        setCustomCounters(newCustomCounter)\n    }\n    const ResetAllCustomCounters = () => {\n        const newCustomCounter = NumberOfCustomCounters.slice()\n        newCustomCounter.map((el) => el[1] = 0)\n        setCustomCounters(newCustomCounter)\n    }\n\n    return (\n        <center>\n            <fieldset>\n                <legend>Default Counter</legend>\n                <div className=\"App\">\n                    <button onClick={addCounter}>Add counter</button>\n                    <button onClick={DeleteAll}> Delete all counters</button>\n                    <button onClick={ResetAll}> Reset all to zero</button>\n                    {counter.map((el, index) => <Counter\n                            count={el}\n                            key={index}\n                            index={index}\n                            plusOne={plusOne}\n                            resetCounter={resetCounter}\n                            destroyCounter={destroyCounter}\n                        />\n                    )}\n\n                </div>\n            </fieldset>\n            <br/>\n            <br/>\n            <br/>\n            <fieldset>\n                <legend>Custom Counter</legend>\n                <div>\n                    <button onClick={DeleteAllCustomCounters}> Delete all custom counters</button>\n                    <button onClick={ResetAllCustomCounters}> Reset all custom counters to zero</button>\n                    {NumberOfCustomCounters.map((el, index) => <CustomCounter\n                            NumberOfButtons={el[0]}\n                            valueToChange={el[1]}\n                            key={index}\n                            index={index}\n                            ResetCustomCounter={ResetCustomCounterToZero}\n                            destroyCustomCounter={DestroyCustomCounter}\n                            ChangeCustomCounter={ChangeCustomCounterValue}\n                        />\n                    )}\n                    <br/>\n                    <br/>\n                    <br/>\n                    <CustomCounterAdd CreateCustomCounter={CreateCustomCounter}/>\n                </div>\n\n\n            </fieldset>\n        </center>\n    );\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}